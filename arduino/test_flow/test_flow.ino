/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:    sensirion-driver-generator 0.9.0
 * Product:      sf06_lf
 * Version:      1.0
 */
/*
 * Copyright (c) 2022, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <Arduino.h>
#include <SensirionI2cSf06Lf.h>
#include <Wire.h>

SensirionI2cSf06Lf sensor;

static char errorMessage[128];
static int16_t error;

int pwr_pin = 5;

int R_pin = 5;
int G_pin = 6;
int B_pin = 4;

int LED_intensity_G = 8;
int LED_intensity_R = 48;

void setup() {
  
    pinMode(R_pin, OUTPUT);
    pinMode(G_pin, OUTPUT);
    pinMode(B_pin, OUTPUT);
    analogWrite(B_pin, 0);

    Serial.begin(115200);
    while (!Serial) {
        delay(100);
    }
    Wire.begin();
    sensor.begin(Wire, SF06_LF_I2C_ADDRESS);

    sensor.stopContinuousMeasurement();
    delay(100);

    
    error = sensor.startH2oContinuousMeasurement();
    if (error != NO_ERROR) {        
        analogWrite(R_pin, LED_intensity_R);
        analogWrite(G_pin, 0);
    }
    else{
        analogWrite(R_pin, 0);
        analogWrite(G_pin, LED_intensity_G);
    }

    delay(100);
   
    
}

void loop() {

    float aFlow = 0.0;
    String aFlow_string = "";
    float aTemperature = 0.0;
    uint16_t aSignalingFlags = 0u;
    delay(50);
    error = sensor.readMeasurementData(INV_FLOW_SCALE_FACTORS_SLF3C_1300F,
                                       aFlow, aTemperature, aSignalingFlags);
    if (error != NO_ERROR) {
        analogWrite(R_pin, LED_intensity_R);
        return;
    }
    else{
        analogWrite(R_pin, 0);
    }
    aFlow_string = "F" + String(aFlow,4);
    Serial.println(aFlow_string);
    
}
